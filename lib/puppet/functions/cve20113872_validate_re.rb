# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#       Perform simple validation of a string against a regular expression.  The second
#    argument of the function should be a string regular expression (without the //'s)
#    or an array of regular expressions.  If none of the regular expressions in the array
#    match the string passed in, then an exception will be raised.
#
#    Example:
#
#    These strings validate against the regular expressions
#
#        cve20113872_validate_re('one', '^one$')
#        cve20113872_validate_re('one', [ '^one', '^two' ])
#
#    These strings do NOT validate
#
#        cve20113872_validate_re('one', [ '^two', '^three' ])
#
#    Jeff McCune <jeff@puppetlabs.com>
#
#
#
Puppet::Functions.create_function(:'cve20113872_validate_re') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
    if args.length != 2 then
      raise Puppet::ParseError, ("cve20113872_validate_re(): wrong number of arguments (#{args.length}; must be 2)")
    end

    msg = "cve20113872_validate_re(): #{args[0].inspect} does not match #{args[1].inspect}"

    raise Puppet::ParseError, (msg) unless args[1].any? do |re_str|
      args[0] =~ Regexp.compile(re_str)
    end
  
  end
end
