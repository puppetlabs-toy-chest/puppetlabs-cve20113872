#! /bin/bash
#
set -e
set -u

export PATH="/opt/puppet/bin:$PATH"

# The intermediate certificate name is a required argument
if [[ -z "${1:-}" ]]; then
  echo "You must specify the intermediate master certname as argument 1" >&2
  echo "e.g. $(basename ${0}) puppetmaster.new" >&2
  exit 1
else
  new_master_cert="${1}"
  shift
fi

timestamp="$(ruby -e 'puts Time.now.to_i')"

puppet resource service pe-httpd ensure=stopped hasstatus=true

# As LAK points out, configuring Puppet to communicate with a master
# using a name that is not in CN or CERTDNSNAMES will secure the
# entire system again.
# We need a new certificate to do this...
old_master_cert="$(puppet master --configprint certname)"

apachevhost="/etc/puppetlabs/httpd/conf.d/puppetmaster.conf"

confdir="$(puppet master --configprint confdir)"
ssldir="$(puppet master --configprint ssldir)"
manifest="$(puppet master --configprint manifest)"
puppetconf="$(puppet master --configprint config)"
autosign="${confdir}/autosign.conf"
hostcrl="$(puppet master --configprint hostcrl)"

# The new CA CN _must_ be different than the old CA CN
old_ca_cn="$(puppet master --configprint ca_name)"

# Make sure certdnnames are off.
idx=0
echo "Making sure certdnsnames are turned off ... (${puppetconf})"
ruby -p -l -i.backup.${timestamp}.${idx} -e \
  'gsub(/^(\s*)(certdnsnames\b.*$)/) { "#{$1}# Disabled to mitigate CVE-2011-3872\n#{$1}# #{$2}" }' \
  "${puppetconf}"
((idx++))

# Replace the old master name with the new master name
echo "Reconfiguring puppet.conf to switch server names..."
ruby -p -l -i.backup.${timestamp}.${idx} -e \
  'gsub(/^(\s*)([^#]*?server.*?=)(\s*)('"${old_master_cert}"')\s*$/) { "#{$1}# Name Fix: #{$4} => '"${new_master_cert}"'\n#{$1}#{$2}#{$3}'"${new_master_cert}"'" }' \
  "${puppetconf}"
((idx++))

# PE configures the fileserver using the old name by default in site.pp  We need to fix this
echo "Patching site.pp to update fileserver resources ..."
ruby -p -l -i.backup.${timestamp}.${idx} -e \
  'gsub(/\b(server\s*=>\s*.*?)('"${old_master_cert}"')(\W*)/) { "#{$1}'"${new_master_cert}"'#{$3}" }' \
  "${manifest}"
((idx++))

echo "Patching $apachevhost ..."
# Reconfigure PE Apache to use the new master SSL certificate
ruby -p -l -i.backup.${timestamp}.${idx} -e \
  'gsub(/^(\s*?)(SSLCertificateFile\s+)(.*)$/) { "#{$1}# CVE-2011-3872 Fix (Was: #{$3})\n#{$1}#{$2}'"${ssldir}/certs/${new_master_cert}.pem"'" }' \
  "${apachevhost}"
((idx++))
ruby -p -l -i.backup.${timestamp}.${idx} -e \
  'gsub(/^(\s*?)(SSLCertificateKeyFile\s+)(.*)$/) { "#{$1}# CVE-2011-3872 Fix (Was: #{$3})\n#{$1}#{$2}'"${ssldir}/private_keys/${new_master_cert}.pem"'" }' \
  "${apachevhost}"
((idx++))
# Reconfigure PE Apache to use the CRL Bundle
ruby -p -l -i.backup.${timestamp}.${idx} -e \
  'gsub(/^(\s*?)(SSLCARevocationFile\s+)(.*)$/) { "#{$1}# CVE-2011-3872 Fix (Was: #{$3})\n#{$1}#{$2}'"${ssldir}/crl_bundle.pem"'" }' \
  "${apachevhost}"
((idx++))
# Reconfigure PE Apache to authenticate the Old CA AND the New CA
ruby -p -l -i.backup.${timestamp}.${idx} -e \
  'gsub(/^(\s*?)(SSLCACertificateFile\s+)(.*)$/) { "#{$1}# CVE-2011-3872 Fix (Was: #{$3})\n#{$1}#{$2}'"${ssldir}/certs/ca_bundle.pem"'" }' \
  "${apachevhost}"
((idx++))
# This isn't strictly necessary since we only use self signed CA's and not chained CA's
ruby -p -l -i.backup.${timestamp}.${idx} -e \
  'gsub(/^(\s*?)(SSLCertificateChainFile\s+)(.*)$/) { "#{$1}# CVE-2011-3872 Fix (Was: #{$3})\n#{$1}#{$2}'"${ssldir}/certs/ca_bundle.pem"'" }' \
  "${apachevhost}"
((idx++))

# Generate the new SSL certificate using the old CA
# NOTE (THIS STEP we need to get a good, new name for the end user)
puppet cert --generate --certdnsnames "${old_master_cert}" "${new_master_cert}"

# Move the SSL directory.
oldssldir="${ssldir}.previous"
echo "Moving ${ssldir} to ${oldssldir}"
mv "${ssldir}" "${oldssldir}"

# Patch the CA name setting in puppet.conf
if ruby -e 'while gets() do; exit(0) if /^[^#]*ca_name/; end; exit 1;' "${puppetconf}"
then
  # This replacement is for the case we already have ca_name in the config file
  ruby -p -l -i.backup.${timestamp}.${idx} -e \
    'gsub(/^(\s*)([^#]*ca_name)(.*=\s*)(.*)$/) { "#{$1}# CVE-2011-3872 Previous Name: #{$4}\n#{$1}ca_name = '"'Puppet CA: ${new_master_cert}'"'" }' \
    "${puppetconf}"
  ((idx++))
else
  echo "Adding ca_name setting to [main] in puppet.conf ..." >&2
  # This replacement is for when we need to add ca_name to the config file
  ruby -p -l -i.backup.${timestamp}.${idx} -e \
    'gsub(/^(\s*)(\[main\].*)$/) { "#{$2}\n    # CVE-2011-3872 Previous Name: '"${old_ca_cn}"'\n    ca_name = '"'Puppet CA: ${new_master_cert}'"'" }' \
    "${puppetconf}"
  ((idx++))
fi

# Generate the new CA
echo "Generating the new CA ..."
# NOTE: We're generating a certificate for the old master's name using the new CA.
# JJM - I anticipate the end user will ultimately "switch back" to the old name
# once all of the agents have been migrated.
puppet cert --generate --certdnsnames "${new_master_cert}" "${old_master_cert}"

# Copy the new, secure SSL certificate generated by the OLD CA into the location
# used by the PE Apache server
echo "Copying puppet master's secured certificate into place..."
for d in certs private_keys public_keys; do
  # NOTE, we copy the new cert, e.g. "puppetmaster.secure" to the old name, e.g. "puppetmaster"
  cp -p "${oldssldir}/${d}/${new_master_cert}.pem" "${ssldir}/${d}/${new_master_cert}.pem"
done

# Configure Apache to trust old clients:
# JJM - We're using a "ca_bundle and crl_bundle" which Puppet doesn't
# know anything about to make it easier to "clean up" after the migration.
cat "${ssldir}"/certs/ca.pem > "${ssldir}/certs/ca_bundle.pem"
cat "${oldssldir}"/certs/ca.pem  >> "${ssldir}"/certs/ca_bundle.pem
# JJM: FIXME (Puppet) The ORDER IS IMPORTANT.  The Agent appears to only read the first CRL in this bundle...  =(
cat "${oldssldir}"/crl.pem > "${ssldir}"/crl_bundle.pem
cat "${ssldir}"/crl.pem >> "${ssldir}"/crl_bundle.pem
# Copy the old CA certificate into the new SSL directory, clearly marking it as the previous one.
cp -p "${oldssldir}"/certs/ca.pem "${ssldir}"/certs/ca_previous.pem

# The agent on the master needs the same bundles as the Apache server does:
cp -p "${ssldir}/certs/ca_bundle.pem" "${ssldir}/certs/ca.pem"
cp -p "${ssldir}/crl_bundle.pem" "${ssldir}/crl.pem"

# At this point, existing agents should be able to communicate with the master.  New certificates
# will be signed by the new CA.
puppet resource service pe-httpd ensure=running hasstatus=true

# Run Puppet Agent so that MCollective Self-Heals itself.
puppet agent --test

echo ""
echo "Your master has been reconfigured with a new name to mitigate CVE-2011-3872"
echo "Your agents will not work until they're configured to use this new name."
echo "You can expect to receive the error: Failed to generate additional resources using 'eval_generate': hostname was not match with the server certificate"
echo "If your name service is configured already, your agents should work with the following command:"
echo ""
echo "puppet agent --test --server ${new_master_cert}"
echo ""
echo "This command may help you switch your puppet.conf on all of the agents."

