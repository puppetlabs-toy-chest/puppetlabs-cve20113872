#! /bin/bash
#
set -e
set -u

export PATH="/opt/puppet/bin:$PATH"

# Steps:
# Update puppet.conf
# Move the existing SSL directory out of the way
# Generate a new CA
# Configure Apache to trust clients with certificates issued by the new and old CA.
# Add the cve20113872::newcsr class to all of the agent catalogs.

module="cve20113872"
vardir="$(puppet master --configprint vardir)"
confdir="$(puppet master --configprint confdir)"
ssldir="$(puppet master --configprint ssldir)"
puppetconf="$(puppet master --configprint config)"
certname="$(puppet master --configprint certname)"
old_ca_cn="$(puppet master --configprint ca_name)"

apachevhost="/etc/puppetlabs/httpd/conf.d/puppetmaster.conf"
timestamp="$(ruby -e 'puts Time.now.to_i')"
idx=0

# This is some shell magic to read a file into a variable if the
# variable isn't already set.
: ${DNS_NAME:=$(cat "${vardir}/${module}/dns_name")}
if [[ -z "${DNS_NAME}" ]]; then
  echo "Error: Could not determine the intermediate dns name from step1." >&2
  echo "Did you run step1 first?" >&2
  exit 1
fi
: ${DNS_ALT_NAMES:=$(cat "${vardir}/${module}/alt_names")}
if [[ -z "${DNS_ALT_NAMES}" ]]; then
  echo "Error: Could not determine the certdnsnames from step1." >&2
  echo "Did you run step1 first?" >&2
  echo "If you do not want any alternate names in your new master certificate" >&2
  echo "simply touch ${vardir}/${module}/alt_names (Create an empty file)" >&2
  exit 1
fi

# This is disabled at this point in puppet.conf, so we have to read it from what
# we wrote out in step1
certdnsnames="${DNS_ALT_NAMES}"
intermediate_name="${DNS_NAME}"

echo -n "Stopping Puppet Master..." >&2
puppet resource service pe-httpd ensure=stopped hasstatus=true 2>&1 >/dev/null
echo "done." >&2

# Patch the CA name setting in puppet.conf
# This is a ruby implementation of "grep"
if ruby -e 'while gets() do; exit(0) if /^\s*ca_name\s*=/; end; exit 1;' "${puppetconf}"
then
  # This replacement is for the case we already have ca_name in the config file
  ruby -p -l -i.backup.${timestamp}.${idx} -e \
    'gsub(/^(\s*)(\s*ca_name)(\s*=\s*)(.*)$/) { "#{$1}# CVE-2011-3872 Previous Name: #{$4}\n#{$1}ca_name = '"'Puppet CA: ${intermediate_name} ${timestamp}'"'" }' \
    "${puppetconf}"
  ((idx++))
else
  echo -n "Adding ca_name setting to [main] in puppet.conf ..." >&2
  # This replacement is for when we need to add ca_name to the config file
  ruby -p -l -i.backup.${timestamp}.${idx} -e \
    'gsub(/^(\s*)(\[main\].*)$/) { "#{$2}\n    # CVE-2011-3872 Previous Name: '"${old_ca_cn}"'\n    ca_name = '"'Puppet CA: ${intermediate_name} ${timestamp}'"'" }' \
    "${puppetconf}"
  ((idx++))
  echo "done." >&2
fi

# Move the SSL directory.
oldssldir="${ssldir}.previous"
echo -n "Moving ${ssldir} to ${oldssldir} ..." >&2
mv "${ssldir}" "${oldssldir}"
echo "done." >&2

# Generate the new CA (The ca_name setting needs to be set in puppet.conf when
# this is run.)
echo -n "Generating the new CA ..." >&2
puppet cert --generate --certdnsnames "${certdnsnames}" "${certname}" >/dev/null
echo "done." >&2

# Copy the new, secure SSL certificate generated by the OLD CA into the location
# used by the PE Apache server
echo -n "Copying puppet master's secured certificate into place ..." >&2
for d in certs private_keys public_keys; do
  # NOTE, we copy the new cert, e.g. "puppetmaster.secure" to the old name, e.g. "puppetmaster"
  cp -p "${oldssldir}/${d}/${certname}.pem" "${ssldir}/${d}/${certname}.pem"
done
echo "done." >&2

# JJM We're appending the old certificate to the new certificate This allows us
# to avoid hacking at the Apache configuration file.

echo -n "Appending previous CA certificate to the new CA certificate ..." >&2
cat "${oldssldir}/certs/ca.pem" >> "${ssldir}/certs/ca.pem"
# The previous CRL needs to be listed first, otherwise the agent on the master
# gets a certificate verify failed error.
cp -p "${ssldir}/crl.pem" "${ssldir}/crl.pem.new"
cat "${oldssldir}/crl.pem" > "${ssldir}/crl.pem"
cat "${ssldir}/crl.pem.new" >> "${ssldir}/crl.pem"
# Clean up to prevent confusion
rm -f "${ssldir}/crl.pem.new"
echo "done." >&2

echo -n "Starting Puppet Master ..." >&2
puppet resource service pe-httpd ensure=running hasstatus=true 2>&1 >/dev/null
echo "done." >&2

# This regenerates MCollective Keys (If Necessary)
echo -n "Running Puppet Agent ..." >&2
# Without the ||true we never get beyond this line because of set -e
puppet agent --test 2>/dev/null >/dev/null || true
echo "done." >&2

